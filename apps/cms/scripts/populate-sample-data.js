'use strict';

/**
 * Sample data population script for B-Audio.vn
 * Run with: npm run strapi script populate-sample-data
 */

const categories = [
  {
    name: 'Loa Bluetooth',
    slug: 'loa-bluetooth',
    description: 'Loa bluetooth di ƒë·ªông, √¢m thanh ch·∫•t l∆∞·ª£ng cao',
    published_at: new Date(),
  },
  {
    name: 'Loa K√©o Karaoke',
    slug: 'loa-keo-karaoke',
    description: 'Loa k√©o karaoke c√¥ng su·∫•t l·ªõn, ph√π h·ª£p s·ª± ki·ªán',
    published_at: new Date(),
  },
  {
    name: 'Loa DIY Custom',
    slug: 'loa-diy-custom',
    description: 'Loa custom theo y√™u c·∫ßu, t·ªëi ∆∞u √¢m thanh theo s·ªü th√≠ch',
    published_at: new Date(),
  },
  {
    name: 'Ph·ª• ki·ªán √¢m thanh',
    slug: 'phu-kien-am-thanh',
    description: 'Amplifier, driver, crossover v√† c√°c ph·ª• ki·ªán √¢m thanh',
    published_at: new Date(),
  },
];

const products = [
  {
    title: 'Loa Bluetooth Mini BT-2024',
    slug: 'loa-bluetooth-mini-bt-2024',
    description: 'Loa bluetooth nh·ªè g·ªçn, √¢m bass s√¢u, pin 12h',
    price: 850000,
    sale_price: 750000,
    specifications: {
      'C√¥ng su·∫•t': '20W RMS',
      'K·∫øt n·ªëi': 'Bluetooth 5.0, AUX, USB',
      'Pin': '2400mAh - 12 gi·ªù',
      'K√≠ch th∆∞·ªõc': '180 x 65 x 65mm',
      'Tr·ªçng l∆∞·ª£ng': '450g'
    },
    features: [
      'Bluetooth 5.0 k·∫øt n·ªëi ·ªïn ƒë·ªãnh',
      'Bass reflex tƒÉng c∆∞·ªùng √¢m tr·∫ßm', 
      'Ch·ªëng n∆∞·ªõc IPX5',
      'S·∫°c nhanh USB-C',
      'Micro t√≠ch h·ª£p cho cu·ªôc g·ªçi'
    ],
    is_featured: true,
    stock_quantity: 25,
    published_at: new Date(),
  },
  {
    title: 'Loa K√©o Karaoke Pro KK-500',
    slug: 'loa-keo-karaoke-pro-kk-500',
    description: 'Loa k√©o karaoke 500W, 2 micro kh√¥ng d√¢y, ƒë√®n LED',
    price: 8500000,
    sale_price: 7200000,
    specifications: {
      'C√¥ng su·∫•t': '500W PMPO',
      'Driver': 'Woofer 12" + Tweeter 3"',
      'K·∫øt n·ªëi': 'Bluetooth, USB, SD Card, AUX',
      'Micro': '2 micro kh√¥ng d√¢y UHF',
      'Pin': '4400mAh - 6 gi·ªù',
      'K√≠ch th∆∞·ªõc': '350 x 280 x 610mm',
      'Tr·ªçng l∆∞·ª£ng': '12.5kg'
    },
    features: [
      '2 micro kh√¥ng d√¢y ch·∫•t l∆∞·ª£ng cao',
      'ƒê√®n LED RGB theo nh·∫°c',
      'Equalizer 5 band',
      'Remote control',
      'B√°nh xe di chuy·ªÉn d·ªÖ d√†ng',
      'Ch·ª©c nƒÉng ghi √¢m'
    ],
    is_featured: true,
    stock_quantity: 8,
    published_at: new Date(),
  },
  {
    title: 'Loa Custom HiFi Bookshelf',
    slug: 'loa-custom-hifi-bookshelf',
    description: 'Loa bookshelf custom driver Scanspeak, v·ªè g·ªó t·ª± nhi√™n',
    price: 0,
    specifications: {
      'Driver': 'Scanspeak Revelator (t√πy ch·ªçn)',
      'Crossover': 'Custom design theo y√™u c·∫ßu',
      'V·ªè loa': 'G·ªó MDF/HDF cao c·∫•p',
      'Finish': 'Veneer g·ªó t·ª± nhi√™n ho·∫∑c s∆°n',
      'K√≠ch th∆∞·ªõc': 'Theo y√™u c·∫ßu kh√°ch h√†ng'
    },
    features: [
      'Driver ch·∫•t l∆∞·ª£ng audiophile',
      'Crossover t√≠nh to√°n ch√≠nh x√°c',
      'V·ªè g·ªó th·ª±c handmade',
      'Tuning theo s·ªü th√≠ch √¢m thanh',
      'B·∫£o h√†nh 2 nƒÉm',
      'T∆∞ v·∫•n setup √¢m thanh'
    ],
    is_featured: true,
    is_custom: true,
    stock_quantity: 999,
    published_at: new Date(),
  },
  {
    title: 'Amplifier Class D 100W x2',
    slug: 'amplifier-class-d-100w-x2',
    description: 'Amplifier Class D hi·ªáu su·∫•t cao, 100W x2 k√™nh',
    price: 1200000,
    specifications: {
      'C√¥ng su·∫•t': '100W x2 @ 4Œ©',
      'THD': '<0.05%',
      'SNR': '>100dB',
      'ƒê√°p ·ª©ng t·∫ßn s·ªë': '20Hz - 20kHz',
      'Input': 'RCA, XLR',
      'Ngu·ªìn': '24V DC',
      'K√≠ch th∆∞·ªõc': '165 x 125 x 45mm'
    },
    features: [
      'Class D hi·ªáu su·∫•t cao >90%',
      'B·∫£o v·ªá qu√° t·∫£i, ng·∫Øn m·∫°ch',
      'LED b√°o tr·∫°ng th√°i',
      'T·∫£n nhi·ªát nh√¥m cao c·∫•p',
      'K·∫øt n·ªëi d√¢y ch·∫Øc ch·∫Øn'
    ],
    stock_quantity: 15,
    published_at: new Date(),
  }
];

module.exports = async () => {
  console.log('üöÄ Starting sample data population...');
  
  try {
    // Create categories
    console.log('üìÇ Creating categories...');
    const createdCategories = [];
    
    for (const categoryData of categories) {
      const existingCategory = await strapi.db.query('api::category.category').findOne({
        where: { slug: categoryData.slug }
      });
      
      if (!existingCategory) {
        const category = await strapi.db.query('api::category.category').create({
          data: categoryData
        });
        createdCategories.push(category);
        console.log(`‚úÖ Created category: ${category.name}`);
      } else {
        createdCategories.push(existingCategory);
        console.log(`üì¶ Category exists: ${existingCategory.name}`);
      }
    }
    
    // Create products with category relationships
    console.log('üéµ Creating products...');
    
    for (let i = 0; i < products.length; i++) {
      const productData = products[i];
      
      const existingProduct = await strapi.db.query('api::product.product').findOne({
        where: { slug: productData.slug }
      });
      
      if (!existingProduct) {
        // Assign category based on product type
        let categoryId = null;
        if (productData.slug.includes('bluetooth')) {
          categoryId = createdCategories.find(c => c.slug === 'loa-bluetooth')?.id;
        } else if (productData.slug.includes('karaoke')) {
          categoryId = createdCategories.find(c => c.slug === 'loa-keo-karaoke')?.id;
        } else if (productData.slug.includes('custom')) {
          categoryId = createdCategories.find(c => c.slug === 'loa-diy-custom')?.id;
        } else {
          categoryId = createdCategories.find(c => c.slug === 'phu-kien-am-thanh')?.id;
        }
        
        const product = await strapi.db.query('api::product.product').create({
          data: {
            ...productData,
            category: categoryId
          }
        });
        
        console.log(`‚úÖ Created product: ${product.title}`);
      } else {
        console.log(`üì¶ Product exists: ${existingProduct.title}`);
      }
    }
    
    console.log('üéâ Sample data population completed!');
    console.log('üîó Access admin at: https://api.b-audio.vn/admin');
    
  } catch (error) {
    console.error('‚ùå Error populating sample data:', error);
    throw error;
  }
};
